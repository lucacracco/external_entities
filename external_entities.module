<?php
/**
 * @file
 * Hook implementations for the External Entities module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function external_entities_theme() {
  return [
    'external_entities_add_list' => [
      'variables' => ['external_entity_types' => NULL],
    ],
    'external_entity' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for list of available external entity type templates.
 *
 * Default template: external-entities-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of external entity types.
 */
function template_preprocess_external_entities_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['external_entity_types'])) {
    /** @var \Drupal\external_entities\Entity\ExternalEntityTypeInterface $type */
    foreach ($variables['external_entity_types'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => \Drupal::l($type->label(), new Url('external_entity.add', ['external_entity_type' => $type->id()])),
        'description' => Xss::filterAdmin($type->getDescription()),
      ];
    }
  }
}

/**
 * Prepares variables for external entity templates.
 *
 * Default template: external-entity.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the external entity and any
 *     fields attached to the entity. Properties used:
 *     - #external_entity: A \Drupal\external_entities\Entity\ExternalEntity
 *       object.
 *     - #view_mode: The current view mode for this external entity, e.g.
 *       'full' or 'teaser'.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_external_entity(&$variables) {
  $variables['external_entity'] = $variables['elements']['#external_entity'];
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_form_alter().
 */
function external_entities_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // form field storage.
  if ($form_id === 'field_storage_config_edit_form') {

    /** @var \Drupal\field\FieldStorageConfigInterface $field */
    $field = $form_state->getFormObject()->getEntity();

    // Not applied for entity not external_entity.
    if ($field->getTargetEntityTypeId() !== "external_entity") {
      return;
    }

    // Unset FieldStorageConfigEditForm::validateForm() for validation cardinality.
    $pos = array_search('::validateForm', $form['#validate']);
    if ($pos !== FALSE) {
      unset($form['#validate'][$pos]);
    }
  }

  // Form field instance.
  if ($form_id === 'field_config_edit_form') {

    /** @var \Drupal\field\FieldConfigInterface $field_conf */
    $field_conf = $form_state->getFormObject()->getEntity();
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
    $field_storage = $field_conf->getFieldStorageDefinition();

    $form['external_entities_mapping_fields'] = [
      '#type' => 'details',
      '#title' => t('Mapping fields'),
      '#tree' => TRUE,
    ];

    $properties = $field_storage->getPropertyNames();
    $third_settings = $field_conf->getThirdPartySetting('external_entities', _external_entities_name_mapping_settings($field_conf, $field_conf->getName()));
    foreach ($properties as $property_name) {
      $form['external_entities_mapping_fields'][$property_name] = [
        '#type' => 'textfield',
        '#title' => t(ucfirst($property_name)),
        '#default_value' => $third_settings[$property_name],
      ];
    }

    $form['actions']['submit']['#submit'][] = 'external_entities_mapping_fields_submit';
  }
}

/**
 * Submit form custom for store third settings.
 */
function external_entities_mapping_fields_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\field\FieldConfigInterface $field_conf */
  $field_conf = $form_state->getFormObject()->getEntity();
  $fields_mapping = $form_state->getValue('external_entities_mapping_fields');
  $conf = [];
  foreach ($fields_mapping as $key => $value) {
    $conf[$key] = $value;
  }
  if (!empty($conf)) {
    $field_conf->setThirdPartySetting('external_entities', _external_entities_name_mapping_settings($field_conf, $field_conf->getName()), $conf);
    $field_conf->save();
  }
}

/**
 * Retrieve a name for configuration third settings name.
 *
 * @param \Drupal\field\FieldConfigInterface $field
 *   Field.
 * @param $key
 *   Name of key.
 *
 * @return string
 */
function _external_entities_name_mapping_settings($field, $key) {
  return implode("-", [
    $field->getTargetEntityTypeId(),
    $field->getTargetBundle(),
    $key
  ]);
}